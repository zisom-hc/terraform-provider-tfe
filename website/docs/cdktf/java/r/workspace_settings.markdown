---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace_setting"
description: |-
  Manages workspace settings.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_workspace_settings

Manages or reads execution mode and agent pool settings for a workspace. This also interacts with the organization's default values for several settings, which can be managed with [tfe_organization_default_settings](organization_default_settings.html). If other resources need to identify whether a setting is a default or an explicit value set for the workspace, you can refer to the read-only `overwrites` argument.

## Example Usage

Basic usage:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organization.*;
import gen.providers.tfe.workspace.*;
import gen.providers.tfe.workspaceSettings.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        Organization tfeOrganizationTestOrganization = new Organization(this, "test-organization", new OrganizationConfig()
                .email("admin@company.com")
                .name("my-org-name")
                );
        Workspace tfeWorkspaceTest = new Workspace(this, "test", new WorkspaceConfig()
                .name("my-workspace-name")
                .organization(Token.asString(tfeOrganizationTestOrganization.getName()))
                );
        new WorkspaceSettings(this, "test-settings", new WorkspaceSettingsConfig()
                .executionMode("local")
                .workspaceId(Token.asString(tfeWorkspaceTest.getId()))
                );
    }
}
```

With `executionMode` of `agent`:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.organization.*;
import gen.providers.tfe.workspace.*;
import gen.providers.tfe.agentPool.*;
import gen.providers.tfe.agentPoolAllowedWorkspaces.*;
import gen.providers.tfe.workspaceSettings.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        Organization tfeOrganizationTestOrganization = new Organization(this, "test-organization", new OrganizationConfig()
                .email("admin@company.com")
                .name("my-org-name")
                );
        Workspace tfeWorkspaceTest = new Workspace(this, "test", new WorkspaceConfig()
                .name("my-workspace-name")
                .organization(Token.asString(tfeOrganizationTestOrganization.getName()))
                );
        AgentPool tfeAgentPoolTestAgentPool = new AgentPool(this, "test-agent-pool", new AgentPoolConfig()
                .name("my-agent-pool-name")
                .organization(Token.asString(tfeOrganizationTestOrganization.getName()))
                );
        AgentPoolAllowedWorkspaces tfeAgentPoolAllowedWorkspacesTest =
        new AgentPoolAllowedWorkspaces(this, "test_3", new AgentPoolAllowedWorkspacesConfig()
                .agentPoolId(Token.asString(tfeAgentPoolTestAgentPool.getId()))
                .allowedWorkspaceIds(List.of(Token.asString(tfeWorkspaceTest.getId())))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeAgentPoolAllowedWorkspacesTest.overrideLogicalId("test");
        new WorkspaceSettings(this, "test-settings", new WorkspaceSettingsConfig()
                .agentPoolId(Token.asString(tfeAgentPoolAllowedWorkspacesTest.getAgentPoolId()))
                .executionMode("agent")
                .workspaceId(Token.asString(tfeWorkspaceTest.getId()))
                );
    }
}
```

This resource may be used as a data source when no optional arguments are defined:

```java
import software.constructs.*;
import com.hashicorp.cdktf.*;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import gen.providers.tfe.dataTfeWorkspace.*;
import gen.providers.tfe.workspaceSettings.*;
public class MyConvertedCode extends TerraformStack {
    public MyConvertedCode(Construct scope, String name) {
        super(scope, name);
        DataTfeWorkspace dataTfeWorkspaceTest = new DataTfeWorkspace(this, "test", new DataTfeWorkspaceConfig()
                .name("my-workspace-name")
                .organization("my-org-name")
                );
        WorkspaceSettings tfeWorkspaceSettingsTest =
        new WorkspaceSettings(this, "test_1", new WorkspaceSettingsConfig()
                .workspaceId(Token.asString(dataTfeWorkspaceTest.getId()))
                );
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeWorkspaceSettingsTest.overrideLogicalId("test");
        TerraformOutput.Builder.create(this, "workspace-explicit-local-execution")
                .value(Fn.alltrue(Token.asAny(List.of(Op.eq(tfeWorkspaceSettingsTest.getExecutionMode(), "local"), propertyAccess(tfeWorkspaceSettingsTest.getOverwrites(), List.of("0", "\"execution_mode\""))))))
                .build();
    }
}
```

## Argument Reference

The following arguments are supported:

* `workspaceId` - (Required) ID of the workspace.
* `agentPoolId` - (Optional) The ID of an agent pool to assign to the workspace. Requires `executionMode`
  to be set to `agent`. This value _must not_ be provided if `executionMode` is set to any other value.
* `executionMode` - (Optional) Which [execution mode](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#execution-mode)
  to use. Using Terraform Cloud, valid values are `remote`, `local` or `agent`. Using Terraform Enterprise, only `remote` and `local` execution modes are valid. When set to `local`, the workspace will be used for state storage only. **Important:** If you omit this attribute, the resource configures the workspace to use your organization's default execution mode (which in turn defaults to `remote`), removing any explicit value that might have previously been set for the workspace.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The workspace ID.
* `overwrites` - Can be used to check whether a setting is currently inheriting its value from another resource.
  - `executionMode` - Set to `true` if the execution mode of the workspace is being determined by the setting on the workspace itself. It will be `false` if the execution mode is inherited from another resource (e.g. the organization's default execution mode)
  - `agentPool` - Set to `true` if the agent pool of the workspace is being determined by the setting on the workspace itself. It will be `false` if the agent pool is inherited from another resource (e.g. the organization's default agent pool)

## Import

Workspaces can be imported; use `<WORKSPACE ID>` or `<ORGANIZATION NAME>/<WORKSPACE NAME>` as the
import ID. For example:

```shell
terraform import tfe_workspace_settings.test ws-CH5in3chf8RJjrVd
```

```shell
terraform import tfe_workspace_settings.test my-org-name/my-wkspace-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-21ae5bfc5685737786e686595d5f2c56dda05cf11e96b5c4f9cfd31f697e712f -->