---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace_setting"
description: |-
  Manages workspace settings.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_workspace_settings

Manages or reads execution mode and agent pool settings for a workspace. This also interacts with the organization's default values for several settings, which can be managed with [tfe_organization_default_settings](organization_default_settings.html). If other resources need to identify whether a setting is a default or an explicit value set for the workspace, you can refer to the read-only `overwrites` argument.

## Example Usage

Basic usage:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test_organization = tfe.organization.Organization(self, "test-organization",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_workspace_test = tfe.workspace.Workspace(self, "test",
            name="my-workspace-name",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name)
        )
        tfe.workspace_settings.WorkspaceSettings(self, "test-settings",
            execution_mode="local",
            workspace_id=cdktf.Token.as_string(tfe_workspace_test.id)
        )
```

With `execution_mode` of `agent`:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test_organization = tfe.organization.Organization(self, "test-organization",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_workspace_test = tfe.workspace.Workspace(self, "test",
            name="my-workspace-name",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name)
        )
        tfe_agent_pool_test_agent_pool = tfe.agent_pool.AgentPool(self, "test-agent-pool",
            name="my-agent-pool-name",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name)
        )
        tfe_agent_pool_allowed_workspaces_test =
        tfe.agent_pool_allowed_workspaces.AgentPoolAllowedWorkspaces(self, "test_3",
            agent_pool_id=cdktf.Token.as_string(tfe_agent_pool_test_agent_pool.id),
            allowed_workspace_ids=[cdktf.Token.as_string(tfe_workspace_test.id)]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_agent_pool_allowed_workspaces_test.override_logical_id("test")
        tfe.workspace_settings.WorkspaceSettings(self, "test-settings",
            agent_pool_id=cdktf.Token.as_string(tfe_agent_pool_allowed_workspaces_test.agent_pool_id),
            execution_mode="agent",
            workspace_id=cdktf.Token.as_string(tfe_workspace_test.id)
        )
```

This resource may be used as a data source when no optional arguments are defined:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_tfe_workspace_test = tfe.data_tfe_workspace.DataTfeWorkspace(self, "test",
            name="my-workspace-name",
            organization="my-org-name"
        )
        tfe_workspace_settings_test =
        tfe.workspace_settings.WorkspaceSettings(self, "test_1",
            workspace_id=cdktf.Token.as_string(data_tfe_workspace_test.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tfe_workspace_settings_test.override_logical_id("test")
        cdktf.TerraformOutput(self, "workspace-explicit-local-execution",
            value=cdktf.Fn.alltrue(
                cdktf.Token.as_any([
                    cdktf.Op.eq(tfe_workspace_settings_test.execution_mode, "local"),
                    cdktf.property_access(tfe_workspace_settings_test.overwrites, ["0", "\"execution_mode\""
                    ])
                ]))
        )
```

## Argument Reference

The following arguments are supported:

* `workspace_id` - (Required) ID of the workspace.
* `agent_pool_id` - (Optional) The ID of an agent pool to assign to the workspace. Requires `execution_mode`
  to be set to `agent`. This value _must not_ be provided if `execution_mode` is set to any other value.
* `execution_mode` - (Optional) Which [execution mode](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#execution-mode)
  to use. Using Terraform Cloud, valid values are `remote`, `local` or `agent`. Using Terraform Enterprise, only `remote` and `local` execution modes are valid. When set to `local`, the workspace will be used for state storage only. **Important:** If you omit this attribute, the resource configures the workspace to use your organization's default execution mode (which in turn defaults to `remote`), removing any explicit value that might have previously been set for the workspace.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The workspace ID.
* `overwrites` - Can be used to check whether a setting is currently inheriting its value from another resource.
  - `execution_mode` - Set to `true` if the execution mode of the workspace is being determined by the setting on the workspace itself. It will be `false` if the execution mode is inherited from another resource (e.g. the organization's default execution mode)
  - `agent_pool` - Set to `true` if the agent pool of the workspace is being determined by the setting on the workspace itself. It will be `false` if the agent pool is inherited from another resource (e.g. the organization's default agent pool)

## Import

Workspaces can be imported; use `<WORKSPACE ID>` or `<ORGANIZATION NAME>/<WORKSPACE NAME>` as the
import ID. For example:

```shell
terraform import tfe_workspace_settings.test ws-CH5in3chf8RJjrVd
```

```shell
terraform import tfe_workspace_settings.test my-org-name/my-wkspace-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-21ae5bfc5685737786e686595d5f2c56dda05cf11e96b5c4f9cfd31f697e712f -->