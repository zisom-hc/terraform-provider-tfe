---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_registry_provider"
description: |-
  Manages public and private providers in the private registry.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_registry_provider

Manages public and private providers in the private registry.

## Example Usage

Create private provider:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationExample = new Organization.Organization(this, "example", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeRegistryProviderExample =
        new RegistryProvider.RegistryProvider(this, "example_1", new RegistryProviderConfig {
            Name = "my-provider",
            Organization = Token.AsString(tfeOrganizationExample.Name)
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeRegistryProviderExample.OverrideLogicalId("example");
    }
}
```

Create public provider:

```csharp
using Constructs;
using HashiCorp.Cdktf;
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
using Gen.Providers.Tfe;
class MyConvertedCode : TerraformStack
{
    public MyConvertedCode(Construct scope, string name) : base(scope, name)
    {
        var tfeOrganizationExample = new Organization.Organization(this, "example", new OrganizationConfig {
            Email = "admin@company.com",
            Name = "my-org-name"
        });
        var tfeRegistryProviderExample =
        new RegistryProvider.RegistryProvider(this, "example_1", new RegistryProviderConfig {
            Name = "aws",
            Namespace = "hashicorp",
            Organization = Token.AsString(tfeOrganizationExample.Name),
            RegistryName = "public"
        });
        /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
        tfeRegistryProviderExample.OverrideLogicalId("example");
    }
}
```

## Argument Reference

The following arguments are supported:

* `Organization` - (Optional) Name of the organization. If omitted, organization must be defined in the provider config.
* `RegistryName` - (Optional) Whether this is a publicly maintained provider or private. Must be either `Public` or `Private`. Defaults to `Private`.
* `Namespace` - (Optional) The namespace of the provider. Required if `RegistryName` is `Public`, otherwise it can't be configured, and it will be set to same value as the `Organization`.
* `Name` - (Required) Name of the provider.

## Attributes Reference

* `Id` - ID of the provider.
* `CreatedAt` - The time when the provider was created.
* `UpdatedAt` - The time when the provider was last updated.

## Import

Providers can be imported; use `<ORGANIZATION>/<REGISTRY NAME>/<NAMESPACE>/<PROVIDER NAME>` as the import ID.

For example a private provider:

```shell
terraform import tfe_registry_provider.example my-org-name/private/my-org-name/my-provider
```

Or a public provider:

```shell
terraform import tfe_registry_provider.example my-org-name/public/hashicorp/aws
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-0ebe64517a20c552e9e19b3841e4dc62744abf91b85e717ca41ba8858f1723cc -->