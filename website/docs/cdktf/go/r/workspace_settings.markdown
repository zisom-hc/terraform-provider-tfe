---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace_setting"
description: |-
  Manages workspace settings.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_workspace_settings

Manages or reads execution mode and agent pool settings for a workspace. This also interacts with the organization's default values for several settings, which can be managed with [tfe_organization_default_settings](organization_default_settings.html). If other resources need to identify whether a setting is a default or an explicit value set for the workspace, you can refer to the read-only `Overwrites` argument.

## Example Usage

Basic usage:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspaceSettings"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTestOrganization := organization.NewOrganization(this, jsii.String("test-organization"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_AsString(tfeOrganizationTestOrganization.name),
	})
	workspaceSettings.NewWorkspaceSettings(this, jsii.String("test-settings"), &workspaceSettingsConfig{
		executionMode: jsii.String("local"),
		workspaceId: cdktf.Token_*AsString(tfeWorkspaceTest.id),
	})
	return this
}
```

With `ExecutionMode` of `Agent`:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/organization"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/agentPool"
import "github.com/aws-samples/dummy/gen/providers/tfe/agentPoolAllowedWorkspaces"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspaceSettings"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	tfeOrganizationTestOrganization := organization.NewOrganization(this, jsii.String("test-organization"), &organizationConfig{
		email: jsii.String("admin@company.com"),
		name: jsii.String("my-org-name"),
	})
	tfeWorkspaceTest := workspace.NewWorkspace(this, jsii.String("test"), &workspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: cdktf.Token_AsString(tfeOrganizationTestOrganization.name),
	})
	tfeAgentPoolTestAgentPool := agentPool.NewAgentPool(this, jsii.String("test-agent-pool"), &agentPoolConfig{
		name: jsii.String("my-agent-pool-name"),
		organization: cdktf.Token_*AsString(tfeOrganizationTestOrganization.name),
	})
	tfeAgentPoolAllowedWorkspacesTest :=
	agentPoolAllowedWorkspaces.NewAgentPoolAllowedWorkspaces(this, jsii.String("test_3"), &agentPoolAllowedWorkspacesConfig{
		agentPoolId: cdktf.Token_*AsString(tfeAgentPoolTestAgentPool.id),
		allowedWorkspaceIds: []*string{
			cdktf.Token_*AsString(tfeWorkspaceTest.id),
		},
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeAgentPoolAllowedWorkspacesTest.OverrideLogicalId(jsii.String("test"))
	workspaceSettings.NewWorkspaceSettings(this, jsii.String("test-settings"), &workspaceSettingsConfig{
		agentPoolId: cdktf.Token_*AsString(tfeAgentPoolAllowedWorkspacesTest.agentPoolId),
		executionMode: jsii.String("agent"),
		workspaceId: cdktf.Token_*AsString(tfeWorkspaceTest.id),
	})
	return this
}
```

This resource may be used as a data source when no optional arguments are defined:

```go
import constructs "github.com/aws/constructs-go/constructs"
import "github.com/hashicorp/terraform-cdk-go/cdktf"
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import "github.com/aws-samples/dummy/gen/providers/tfe/dataTfeWorkspace"
import "github.com/aws-samples/dummy/gen/providers/tfe/workspaceSettings"
type myConvertedCode struct {
	terraformStack
}

func newMyConvertedCode(scope construct, name *string) *myConvertedCode {
	this := &myConvertedCode{}
	cdktf.NewTerraformStack_Override(this, scope, name)
	dataTfeWorkspaceTest := dataTfeWorkspace.NewDataTfeWorkspace(this, jsii.String("test"), &dataTfeWorkspaceConfig{
		name: jsii.String("my-workspace-name"),
		organization: jsii.String("my-org-name"),
	})
	tfeWorkspaceSettingsTest :=
	workspaceSettings.NewWorkspaceSettings(this, jsii.String("test_1"), &workspaceSettingsConfig{
		workspaceId: cdktf.Token_AsString(dataTfeWorkspaceTest.id),
	})
	/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
	tfeWorkspaceSettingsTest.OverrideLogicalId(jsii.String("test"))
	cdktf.NewTerraformOutput(this, jsii.String("workspace-explicit-local-execution"), &TerraformOutputConfig{
		Value: cdktf.Fn_Alltrue(cdktf.Token_AsAny([]interface{}{
			cdktf.Op_Eq(tfeWorkspaceSettingsTest.executionMode, jsii.String("local")),
			cdktf.propertyAccess(tfeWorkspaceSettingsTest.overwrites, []interface{}{
				jsii.String("0"),
				jsii.String("\"execution_mode\""),
			}),
		})),
	})
	return this
}
```

## Argument Reference

The following arguments are supported:

* `WorkspaceId` - (Required) ID of the workspace.
* `AgentPoolId` - (Optional) The ID of an agent pool to assign to the workspace. Requires `ExecutionMode`
  to be set to `Agent`. This value _must not_ be provided if `ExecutionMode` is set to any other value.
* `ExecutionMode` - (Optional) Which [execution mode](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#execution-mode)
  to use. Using Terraform Cloud, valid values are `Remote`, `Local` or `Agent`. Using Terraform Enterprise, only `Remote` and `Local` execution modes are valid. When set to `Local`, the workspace will be used for state storage only. **Important:** If you omit this attribute, the resource configures the workspace to use your organization's default execution mode (which in turn defaults to `Remote`), removing any explicit value that might have previously been set for the workspace.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `Id` - The workspace ID.
* `Overwrites` - Can be used to check whether a setting is currently inheriting its value from another resource.
  - `ExecutionMode` - Set to `True` if the execution mode of the workspace is being determined by the setting on the workspace itself. It will be `False` if the execution mode is inherited from another resource (e.g. the organization's default execution mode)
  - `AgentPool` - Set to `True` if the agent pool of the workspace is being determined by the setting on the workspace itself. It will be `False` if the agent pool is inherited from another resource (e.g. the organization's default agent pool)

## Import

Workspaces can be imported; use `<WORKSPACE ID>` or `<ORGANIZATION NAME>/<WORKSPACE NAME>` as the
import ID. For example:

```shell
terraform import tfe_workspace_settings.test ws-CH5in3chf8RJjrVd
```

```shell
terraform import tfe_workspace_settings.test my-org-name/my-wkspace-name
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-21ae5bfc5685737786e686595d5f2c56dda05cf11e96b5c4f9cfd31f697e712f -->